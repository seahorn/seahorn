# -*- Python -*-

import os
import sys
import re
import platform
import lit.util
import lit.formats

config.name = 'Seahorn'

config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.ll', '.cpp', '.c']
config.excludes = [ # These are no tests
                  ]
config.test_source_root = os.path.dirname(__file__)
config.test_exec_root = lit_config.params.get('test_dir', '.')
config.useProgressBar= True
config.showOutput= True
config.timeout=30
config.max_time=30

repositoryRoot = os.path.dirname(os.path.dirname(os.path.dirname
                                                 (os.path.abspath(__file__))))

def addEnv(name):
   if name in os.environ:
      config.environment[name] = os.environ[name]

def isexec (fpath):
    if fpath == None: return False
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

def which (cmd):
   return lit.util.which(cmd, config.environment['PATH'])

def getSea():
   return which('sea')

addEnv('HOME')
addEnv('PWD')
addEnv('C_INCLUDE_PATH')

lit_config.note('Repository root is {}'.format(repositoryRoot))

sea_cmd = getSea()
if not isexec(sea_cmd):
   lit_config.fatal('Could not find the Sea executable')

sea = [sea_cmd, 'fpf', '-g', '--horn-bmc-engine=mono',
       '--horn-bmc', '--horn-bv2=true', '--log=opsem',
       '--horn-bv2-vacuity-check=all'
      ]
config.substitutions.append(('%sea', ' '.join(sea)))
config.substitutions.append(('%oc', 'OutputCheck --comment=\;'))
