# -*- Python -*-
import os
import sys
import re
import platform
import lit.util
import lit.formats

config.suffixes = ['.c']
config.excludes = [
  'cex_mem.c',
  'cex_nonlinear_arith.c',
  # need more insight to reproduce these fails
  'cex_mem_fail.c',
  'cex_nonlinear_arith.fail.c'
]

def isexec (fpath):
    if fpath == None: return False
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

def which (cmd):
   return lit.util.which(cmd, config.environment['PATH'])

def getSea():
   return which('sea')

def getArch():
	return '-m32' if platform.architecture() == '32bit' else '-m64'

cex_bmc_extra_params = lit_config.params.get('cex_bmc_opts',"")
if len(cex_bmc_extra_params) != 0:
  print("Passing extra horn bmc cex command line args: {0}".format(
    cex_bmc_extra_params)
  )

cex_gen_extra_params = lit_config.params.get('cex_gen_opts', "")
if len(cex_gen_extra_params) != 0:
  print("Passing extra cex gen cmd line args: {0}".format(cex_gen_extra_params))

sea_cmd = getSea()
if not isexec(sea_cmd):
   lit_config.fatal('Could not find the Sea executable')

machine_arch = getArch()
lit_config.note('Running cex tests under {}-bit architecture'.format(machine_arch[-2:]))
cexbmc = [sea_cmd, 'fpf', machine_arch, '--log=cex'] + [cex_bmc_extra_params]
cexgen = [sea_cmd, 'cex', machine_arch] + [cex_gen_extra_params]
config.substitutions.append(('%solve', ' '.join(cexbmc)))
config.substitutions.append(('%cex', ' '.join(cexgen)))
