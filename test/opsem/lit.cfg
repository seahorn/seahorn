# -*- Python -*-

import os
import sys
import re
import platform
import lit.util
import lit.formats

config.name = 'Seahorn'

config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.ll', '.cpp', '.c']
config.excludes = [ # These are no tests
                  ]
config.test_source_root = os.path.dirname(__file__)
config.test_exec_root = lit_config.params.get('test_dir', '.')
config.useProgressBar= True
config.showOutput= True
config.timeout=30
config.max_time=30

repositoryRoot = os.path.dirname(os.path.dirname(os.path.dirname
                                                 (os.path.abspath(__file__))))

opsem_extra_params = lit_config.params.get('opsem_opts',"")
if len(opsem_extra_params) != 0:
  print("Passing extra opsem command line args: {0}".format(
    opsem_extra_params)
  )

def addEnv(name):
   if name in os.environ:
      config.environment[name] = os.environ[name]

def isexec (fpath):
    if fpath == None: return False
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

def which (cmd):
   return lit.util.which(cmd, config.environment['PATH'])

def getSea ():
   return which('sea')

def getSeaHorn ():
   return which('seahorn')

addEnv('HOME')
addEnv('PWD')
addEnv('C_INCLUDE_PATH')

lit_config.note('Repository root is {}'.format(repositoryRoot))

sea_cmd = getSea()
seahorn_cmd = getSeaHorn()
if not isexec(seahorn_cmd):
   lit_config.fatal('Could not find the Seahorn executable')

config.substitutions.append(('%seahorn', seahorn_cmd))
seabmc = [seahorn_cmd, '--horn-bmc-engine=mono',
          '--horn-bmc', '--horn-bv2=true', '--log=opsem',
          '--keep-shadows=true', '--horn-solve'] + [opsem_extra_params]         
# no --horn-solve
seasmt = [seahorn_cmd, '--horn-bmc-engine=mono',   
          '--horn-bmc', '--horn-bv2=true', '--log=opsem',
          '--keep-shadows=true' ]
sea_fat_bmc = [sea_cmd, 'fpf', '--horn-bmc-engine=mono',   
          '--horn-bmc', '--horn-bv2=true', '--log=opsem',
          '--keep-shadows=true', '--sea-opsem-allocator=normal',
          '--horn-bv2-simplify=true', '--horn-bv2-lambdas',  
          '--horn-gsa', '--horn-vcgen-use-ite',
          '--horn-bv2-extra-widemem',
          '--lower-gv-init', '--lower-gv-init-struct=false', '-S ', '--devirt-functions',
          '--externalize-addr-taken-functions',
          '--horn-unify-assumes=true', '--horn-vcgen-only-dataflow=true', '--horn-bmc-coi=true',
          '--sea-dsa=cs+t', '--horn-explicit-sp0=false', '--sea-dsa-type-aware']          
config.substitutions.append(('%seabmc', ' '.join(seabmc)))
config.substitutions.append(('%seasmt', ' '.join(seasmt)))
config.substitutions.append(('%seafatbmc', ' '.join(sea_fat_bmc)))
config.substitutions.append(('%oc', 'OutputCheck --comment=\;'))
